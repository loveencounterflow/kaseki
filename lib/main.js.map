{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'KASEKI'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ get_kaseki_types }      = require './types'\nCP                        = require 'node:child_process'\nPATH                      = require 'node:path'\n\n\n#===========================================================================================================\nclass Kaseki\n\n  #=========================================================================================================\n  # CONSTRUCTION\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    # super()\n    GUY.props.hide @, 'types', get_kaseki_types()\n    @cfg        = @types.create.ksk_constructor_cfg cfg\n    ### TAINT use types ###\n    GUY.props.hide @, 'spawn_cfg',\n      cwd:        @cfg.checkout_path\n      encoding:   'utf-8'\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _spawn: ( cmd, parameters... ) -> @_spawn_inner cmd, parameters\n  _spawn_inner: ( cmd, parameters, cfg = null ) ->\n    cfg = if cfg? then { @spawn_cfg..., cfg..., } else @spawn_cfg\n    R   = CP.spawnSync cmd, parameters, cfg\n    if R.status isnt 0\n      throw new R.error if R.error?\n      throw new Error R.stderr\n    return R.stdout.replace /\\n$/, ''\n\n  #---------------------------------------------------------------------------------------------------------\n  get_fossil_version_text: -> @_spawn 'fossil', 'version'\n\n  #---------------------------------------------------------------------------------------------------------\n  list_file_names:  -> ( @_spawn 'fossil', 'ls' ).split '\\n'\n  list_file_paths:  -> ( PATH.join @cfg.checkout_path, name for name in @list_file_names() )\n  status_text:      -> @_spawn 'fossil', 'status'\n\n  #---------------------------------------------------------------------------------------------------------\n  fossil_status: ->\n    ###\n      repository: '/home/flow/3rd-party-repos/fossils/datamill-doc-demo.fossil',\n      local-root: '/home/flow/3rd-party-repos/sqlite-archiver/demo/fossil-unpacked/',\n      config-db:  '/home/flow/.config/fossil.db',\n      checkout:   '56ae7533ba4c93de3e4cd54378e86019e04484d8 2022-12-11 10:58:54 UTC',\n      parent:     'bce48ab77a9432b544577c2b200544bcfcfd2c9c 2022-12-11 10:55:57 UTC',\n      tags:       'trunk',\n      comment:    'first (user: flow)'\n    ###\n    R = @status_text()\n    return { error: R, } unless ( /^[^\\s:]+:\\s+\\S+/ ).test R\n    lines   = R.split '\\n'\n    entries = ( line.split /^([^:]+):\\s+(.*)$/ for line in lines )\n    return  Object.fromEntries ( [ k, v, ] for [ _, k, v, ] in entries )\n\n  #---------------------------------------------------------------------------------------------------------\n  status: ->\n    R = {}\n    for k, v of @fossil_status()\n      switch k\n        when 'repository' then R.repo_path      = v\n        when 'local-root' then R.checkout_path  = v\n        when 'config-db'  then R.cfg_path       = v\n        when 'checkout', 'parent'\n          # '56ae7533ba4c93de3e4cd54378e86019e04484d8 2022-12-11 10:58:54 UTC',\n          unless ( g = ( v.match /^(?<id>[0-9a-f]+)\\s+(?<ts>.+)$/ )?.groups )?\n            throw new Error \"^kaseki@1^ unable to parse ID with timestamp #{rpr v}\"\n          R[ \"#{k}_id\" ] = g.id\n          R[ \"#{k}_ts\" ] = GUY.datetime.srts_from_isots g.ts\n        when 'tags'       then R.tags           = v ### TAINT should split tags, return list ###\n        when 'comment'    then R.comment        = v ### TAINT should parse user name ###\n        else R[ k ] = v\n    return R\n\n#===========================================================================================================\nmodule.exports = { Kaseki, }\n\n\n############################################################################################################\nif module is require.main then do =>\n  repo_path     = PATH.resolve PATH.join __dirname, '../../../3rd-party-repos/fossils/datamill-doc-demo.fossil'\n  checkout_path = PATH.resolve PATH.join __dirname, '../../../3rd-party-repos/sqlite-archiver/demo/fossil-unpacked'\n  ksk           = new Kaseki { repo_path, checkout_path, }\n  info  '^345^', rpr ksk.get_fossil_version_text()\n  debug '^345^', ksk._spawn 'ls', '-AlF', '.'\n  debug '^345^', ksk._spawn 'realpath', '.'\n  urge  '^345^', ksk._spawn 'fossil', 'ls'\n  urge  '^345^', ksk.list_file_names()\n  urge  '^345^', ksk.list_file_paths()\n  urge  '^345^', ksk.status_text()\n  urge  '^345^', ksk.fossil_status()\n  help  '^345^', ksk.status()\n  info  '^345^', ( k.padEnd 20 ), v for k, v of ksk.status()\n  return null\n"
  ]
}