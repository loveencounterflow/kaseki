{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'KASEKI'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ get_kaseki_types }      = require './types'\nCP                        = require 'node:child_process'\nPATH                      = require 'node:path'\n_as_cli_parameters        = null\n\n\n#===========================================================================================================\ndo ->\n  { isa,\n    type_of } = get_kaseki_types()\n  #.........................................................................................................\n  _as_cli_parameters = ( P... ) ->\n    ### Given any number of arguments, turn them into a list of strings, potentially usable as the `args`\n    input for NodeJS's `child_process.spawn()` method ('potentially' here meaning that unless checks on\n    parameter names and values are performed, the returned list may not be a suitable input).\n\n    The method allows for any number of positional and named arguments. Positional arguments will result\n    from primitive values, most often texts, numbers, and booleans. Objects with key/value pairs, on the\n    other hand, will be turned into named arguments. Underscores in keys will be replaced by hyphens.\n    Single-letter keys will be prefixed with a single hyphen, longer ones with two hyphens. Empty strings as\n    keys are not allowed.\n\n    While it is possible to nest objects, it's probably a good idea not to use that 'feature' which is not\n    safeguarded against for the sole reason that this routine is not meant for public consumption. ###\n    R = []\n    for p in P\n      switch type = type_of p\n        when 'text'             then R.push p\n        when 'float', 'boolean' then R.push \"#{p}\"\n        when 'object'\n          for key, value of p\n            throw new Error \"^kaseki@1^ detected empty key in #{rpr P}\" if key.length is 0\n            key     = key.replace /_/g, '-'\n            prefix  = if key.length is 1 then '-' else '--'\n            R.push prefix + key\n            continue unless value?\n            R.push x for x in _as_cli_parameters value\n        else\n          throw new Error \"^kaseki@1^ unable to convert a #{type} to text\"\n    return R\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\nclass Intercom\n\n  #=========================================================================================================\n  # CONSTRUCTION\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    GUY.props.hide @, 'types', get_kaseki_types()\n    @cfg        = @types.create.ic_constructor_cfg cfg\n    my_env      =\n      LANG:       'C'\n      LANGUAGE:   'C'\n      LC_ALL:     'C'\n    env = { process.env..., my_env..., }\n    GUY.props.hide @, 'spawn_cfg',\n      cwd:        @cfg.work_path\n      encoding:   'utf-8'\n      env:        env\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  spawn: ( cmd, parameters... ) -> @_spawn_inner cmd, parameters\n  _spawn_inner: ( cmd, parameters, cfg = null ) ->\n    cfg = if cfg? then { @spawn_cfg..., cfg..., } else @spawn_cfg\n    R   = CP.spawnSync cmd, parameters, cfg\n    if R.status isnt 0\n      if R.error?\n        cmd_line = cmd\n        cmd_line = cmd + ' ' + parameters.join ' ' if parameters.length > 0\n        throw new Error \"^kaseki@1^ when trying to execute #{rpr cmd_line} in directory #{cfg.cwd}, \" + \\\n          \"an error occurred: #{R.error}\"\n      throw new Error R.stderr\n    return R.stdout.replace /\\n$/, ''\n\n  #---------------------------------------------------------------------------------------------------------\n  _as_lines: ( text ) -> ( text.split '\\n' ).filter ( x ) -> x isnt ''\n\n\n#===========================================================================================================\nclass Kaseki\n\n  #=========================================================================================================\n  # CONSTRUCTION\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    # super()\n    GUY.props.hide @, 'types', get_kaseki_types()\n    @cfg        = @types.create.ksk_constructor_cfg cfg\n    ### TAINT use types ###\n    GUY.props.hide @, 'ic', new Intercom { work_path: @cfg.work_path, }\n    return undefined\n\n#===========================================================================================================\nclass Fossil extends Kaseki\n\n  #---------------------------------------------------------------------------------------------------------\n  ls:               -> @list_file_names()\n  list_file_names:  -> @lns_ls()\n  list_file_paths:  -> ( PATH.join @cfg.work_path, name for name in @list_file_names() )\n  open:             -> @raw_open @cfg.repo_path\n  has_changes:      -> @lns_changes().length > 0\n  list_of_changes:  -> ( [ t[ 11 .. ], t[ .. 10 ].trimEnd().toLowerCase(), ] for t in @lns_changes() )\n  changes_by_file:  -> Object.fromEntries @list_of_changes()\n  #.........................................................................................................\n  ### NOTE first arguments of the methods possibly to be made optional `cfg` objects ###\n  add:              ( path    ) -> @ic.spawn 'fossil', 'add', path\n  commit:           ( message ) -> @ic.spawn 'fossil', 'commit', '-m', message\n\n  #---------------------------------------------------------------------------------------------------------\n  init: ( cfg ) ->\n    init = => @ic.spawn 'fossil', 'init', @cfg.repo_path\n    cfg = @types.create.ksk_init_cfg cfg\n    try init() catch error\n      if error.message.startsWith 'file already exists:'\n        return null if cfg.if_exists is 'ignore'\n      throw new Error \"when trying to `init` repo #{@cfg.repo_path}, an error occurred: #{error.message}\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _status: ->\n    R = @ic.spawn 'fossil', 'status'\n    return { error: R, } unless ( /^[^\\s:]+:\\s+\\S+/ ).test R\n    lines   = R.split '\\n'\n    entries = ( line.split /^([^:]+):\\s+(.*)$/ for line in lines )\n    return  Object.fromEntries ( [ k, v, ] for [ _, k, v, ] in entries when k? )\n\n  #---------------------------------------------------------------------------------------------------------\n  status: ->\n    R = {}\n    for k, v of @_status()\n      switch k\n        when 'repository' then R.repo_path      = v\n        when 'local-root' then R.work_path  = v\n        when 'config-db'  then R.cfg_path       = v\n        when 'checkout', 'parent'\n          unless ( g = ( v.match /^(?<id>[0-9a-f]+)\\s+(?<ts>.+)$/ )?.groups )?\n            throw new Error \"^kaseki@1^ unable to parse ID with timestamp #{rpr v}\"\n          R[ \"#{k}_id\" ] = g.id\n          R[ \"#{k}_ts\" ] = GUY.datetime.srts_from_isots g.ts\n        when 'tags'       then R.tags           = v ### TAINT should split tags, return list ###\n        when 'comment'\n          if ( match = v.match /(?<message>^.*)\\(user:\\s+(?<user>\\S+)\\)$/ )?\n            R.message     = match.groups.message.trim()\n            R.user        = match.groups.user.trim()\n          else\n            R.message     = v\n            R.user        = null\n        else R[ k ] = v\n    return R\n\n#===========================================================================================================\ndo ->\n  ### TAINT must translate commands that start with digit ###\n  commands = [ '3-way-merge', 'add', 'addremove', 'alerts', 'all', 'amend', 'annotate', 'artifact',\n    'attachment', 'backoffice', 'backup', 'bisect', 'blame', 'branch', 'bundle', 'cache', 'cat', 'cgi',\n    'changes', 'chat', 'checkout', 'co', 'cherry-pick', 'clean', 'clone', 'close', 'commit', 'ci',\n    'configuration', 'dbstat', 'deconstruct', 'delete', 'descendants', 'describe', 'detach', 'diff',\n    'export', 'extras', 'finfo', 'forget', 'fts-config', 'fusefs', 'gdiff', 'git', 'grep', 'hash-policy',\n    'help', 'hook', 'http', 'import', 'info', 'init', 'new', 'interwiki', 'leaves', 'login-group', 'ls',\n    'md5sum', 'merge', 'merge-base', 'mv', 'open', 'patch', 'pikchr', 'praise', 'publish', 'pull', 'purge',\n    'push', 'rebuild', 'reconstruct', 'redo', 'remote', 'remote-url', 'rename', 'reparent', 'revert', 'rm',\n    'rss', 'scrub', 'search', 'server', 'settings', 'sha1sum', 'sha3sum', 'shell', 'sql', 'sqlar',\n    'sqlite3', 'ssl-config', 'stash', 'status', 'sync', 'tag', 'tarball', 'ticket', 'timeline',\n    'tls-config', 'touch', 'ui', 'undo', 'unpublished', 'unset', 'unversioned', 'uv', 'update', 'user',\n    'version', 'whatis', 'wiki', 'xdiff', 'zip', ]\n  for command in commands then do ( command ) =>\n    raw_name            = \"raw_#{command}\"\n    lns_name            = \"lns_#{command}\"\n    Kaseki::[raw_name]  = ( P... ) -> @ic._spawn_inner 'fossil', [ command, ( _as_cli_parameters P... )..., ]\n    Kaseki::[lns_name]  = ( P... ) -> @ic._as_lines @[raw_name] P...\n  return null\n\n\n#===========================================================================================================\nclass Git extends Kaseki\n\n  #---------------------------------------------------------------------------------------------------------\n  _git_init: ->      @ic._spawn_inner 'git', [ 'init', ]\n  _git_status_sb: -> @ic._spawn_inner 'git', [ 'status', '-sb', ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _add_and_commit_all: ( message = '???' ) ->\n    @ic._spawn_inner 'git', [ 'add', '.', ]\n    @ic._spawn_inner 'git', [ 'commit', '-m', message, ]\n\n  #---------------------------------------------------------------------------------------------------------\n  status: ->\n    [ head\n      tail..., ] = @ic._as_lines @_git_status_sb()\n    R = @types.create.ksk_git_status_cfg()\n    #.......................................................................................................\n    if ( match = head.match /^## No commits yet on (?<local_branch>.*?)$/ )\n      R.local_branch  = match.groups.local_branch\n    #.......................................................................................................\n    else if ( match = head.match /^##\\s+(?<local_branch>.*?)\\.\\.\\.(?<remote_branch>\\S+).*$/ )\n      R.local_branch  = match.groups.local_branch\n      R.remote_branch = match.groups.remote_branch\n    #.......................................................................................................\n    else if ( match = head.match /^##\\s+(?<local_branch>.*?)$/ )\n      R.local_branch  = match.groups.local_branch\n    #.......................................................................................................\n    for line in tail\n      R.dirty_count++ if /^(?<code>..)\\x20(?<path>.+)$/.test line\n    #.......................................................................................................\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  log: ( cfg ) ->\n    cfg     = @types.create.ksk_git_log_cfg cfg\n    format  = \"--pretty=format:'%h%x09%aI%x09%s'\"\n    R       = []\n    for line in @ic._as_lines @ic.spawn 'git', 'log', format, '--since', cfg.since\n      [ hash\n        date_iso\n        message ] = line.split '\\t'\n      R.push { hash, date_iso, message, }\n    return R\n\n\n\n#===========================================================================================================\nmodule.exports = { Kaseki, Fossil, Git, _as_cli_parameters, }\n\n"
  ]
}