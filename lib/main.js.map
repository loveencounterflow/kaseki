{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'KASEKI'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ get_kaseki_types }      = require './types'\nCP                        = require 'node:child_process'\nPATH                      = require 'node:path'\n\n\n#===========================================================================================================\nclass Kaseki\n\n  #=========================================================================================================\n  # CONSTRUCTION\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    # super()\n    GUY.props.hide @, 'types', get_kaseki_types()\n    @cfg        = @types.create.ksk_constructor_cfg cfg\n    ### TAINT use types ###\n    GUY.props.hide @, 'spawn_cfg',\n      cwd:        @cfg.work_path\n      encoding:   'utf-8'\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _spawn: ( cmd, parameters... ) -> @_spawn_inner cmd, parameters\n  _spawn_inner: ( cmd, parameters, cfg = null ) ->\n    cfg = if cfg? then { @spawn_cfg..., cfg..., } else @spawn_cfg\n    R   = CP.spawnSync cmd, parameters, cfg\n    if R.status isnt 0\n      if R.error?\n        cmd_line = cmd + ' ' + parameters.join ' '\n        throw new Error \"^kaseki@1^ when trying to execute #{rpr cmd_line} in directory #{cfg.cwd},\" + \\\n          \" an error occurred: #{R.error}\"\n      throw new Error R.stderr\n    return R.stdout.replace /\\n$/, ''\n\n  #---------------------------------------------------------------------------------------------------------\n  get_fossil_version_text: -> @_spawn 'fossil', 'version'\n\n  #---------------------------------------------------------------------------------------------------------\n  list_file_names:  -> ( ( @_spawn 'fossil', 'ls' ).split '\\n' ).filter ( x ) -> x isnt ''\n  list_file_paths:  -> ( PATH.join @cfg.work_path, name for name in @list_file_names() )\n  open:             -> @_spawn 'fossil', 'open', @cfg.repo_path\n  ls:               -> @list_file_names()\n  change_texts:     -> ( ( @_spawn 'fossil', 'changes' ).split '\\n' ).filter ( x ) -> x isnt ''\n  has_changes:      -> @change_texts().length > 0\n  list_of_changes:  -> ( [ t[ 11 .. ], t[ .. 10 ].trimEnd().toLowerCase(), ] for t in @change_texts() )\n  changes_by_file:  -> Object.fromEntries @list_of_changes()\n  #.........................................................................................................\n  ### NOTE first arguments of the methods possibly to be made optional `cfg` objects ###\n  add:              ( path    ) -> @_spawn 'fossil', 'add', path\n  commit:           ( message ) -> @_spawn 'fossil', 'commit', '-m', message\n\n  #---------------------------------------------------------------------------------------------------------\n  init: ( cfg ) ->\n    init = => @_spawn 'fossil', 'init', @cfg.repo_path\n    cfg = @types.create.ksk_init_cfg cfg\n    try init() catch error\n      if error.message.startsWith 'file already exists:'\n        return null if cfg.if_exists is 'ignore'\n      throw new Error \"when trying to `init` repo #{@cfg.repo_path}, an error occurred: #{error.message}\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _status: ->\n    R = @_spawn 'fossil', 'status'\n    return { error: R, } unless ( /^[^\\s:]+:\\s+\\S+/ ).test R\n    lines   = R.split '\\n'\n    entries = ( line.split /^([^:]+):\\s+(.*)$/ for line in lines )\n    return  Object.fromEntries ( [ k, v, ] for [ _, k, v, ] in entries when k? )\n\n  #---------------------------------------------------------------------------------------------------------\n  status: ->\n    R = {}\n    for k, v of @_status()\n      switch k\n        when 'repository' then R.repo_path      = v\n        when 'local-root' then R.work_path  = v\n        when 'config-db'  then R.cfg_path       = v\n        when 'checkout', 'parent'\n          unless ( g = ( v.match /^(?<id>[0-9a-f]+)\\s+(?<ts>.+)$/ )?.groups )?\n            throw new Error \"^kaseki@1^ unable to parse ID with timestamp #{rpr v}\"\n          R[ \"#{k}_id\" ] = g.id\n          R[ \"#{k}_ts\" ] = GUY.datetime.srts_from_isots g.ts\n        when 'tags'       then R.tags           = v ### TAINT should split tags, return list ###\n        when 'comment'\n          if ( match = v.match /(?<message>^.*)\\(user:\\s+(?<user>\\S+)\\)$/ )?\n            R.message     = match.groups.message.trim()\n            R.user        = match.groups.user.trim()\n          else\n            R.message     = v\n            R.user        = null\n        else R[ k ] = v\n    return R\n\n#===========================================================================================================\nmodule.exports = { Kaseki, }\n\n"
  ]
}