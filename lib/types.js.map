{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug }                 = GUY.trm.get_loggers 'KASEKI/TYPES'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ Intertype }             = require 'intertype'\nbase_types                = null\nserver_types              = null\ndocument_types            = null\nmisfit                    = Symbol 'misfit'\nPATH                      = require 'node:path'\n{ DBay }                  = require 'dbay'\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Intertype()\n  { declare }               = base_types\n  #.........................................................................................................\n  declare.dbay                  override: true, isa: ( x ) -> x?.constructor?.name is 'DBay'\n  ### TAINT should check whether collides with any other prefix ###\n  declare.dbay_prefix                           isa: ( x ) -> ( @isa.text x ) and ( x.endsWith '_' )\n  #.........................................................................................................\n  return base_types\n\n#-----------------------------------------------------------------------------------------------------------\nget_server_types = ->\n  return server_types if server_types?\n  #.........................................................................................................\n  server_types                = new Intertype get_base_types()\n  { declare }                 = server_types\n  #.........................................................................................................\n  declare.datamill_host       'nonempty.text'\n  declare.datamill_port       ( x ) ->\n    return false unless @isa.integer x\n    return false unless 1024 <= x <= 65535\n    return true\n  #.........................................................................................................\n  declare.datamill_server_cfg\n    fields:\n      host:               'datamill_host'\n      port:               'datamill_port'\n      db:                 'dbay'\n    default:\n      host:               'localhost'\n      port:               3456\n      paths:\n        public:     PATH.resolve __dirname, '../public'\n        favicon:    PATH.resolve __dirname, '../public/favicon.png'\n        src:        PATH.resolve __dirname, '../src'\n      file_server:\n        # Enable or disable accepting ranged requests. Disabling this will not send Accept-Ranges and ignore the\n        # contents of the Range request header. defaults to true.\n        acceptRanges:     true\n        # Set Cache-Control response header, defaults to undefined, see docs: Cache-Control in MDN.\n        cacheControl:     undefined\n        # Enable or disable etag generation, defaults to true.\n        etag:             true\n        # Enable or disable Last-Modified header, defaults to true. Uses the file system's last modified value.\n        # defaults to true.\n        lastModified:     true\n        # Set ignore rules. defaults to undefined. ( path ) => boolean\n        ignore:           undefined\n        # If true, serves after await next(), allowing any downstream middleware to respond first. defaults to false.\n        defer:            false\n  #...........................................................................................................\n  return server_types\n\n#-----------------------------------------------------------------------------------------------------------\nget_document_types = ->\n  return document_types if document_types?\n  #.........................................................................................................\n  document_types                = new Intertype get_base_types()\n  { declare }                   = document_types\n  #.........................................................................................................\n  declare.doc_fad_id    'nonempty.text'     ### TAINT should check with DB whether known ###\n  declare.doc_file_path 'nonempty.text'     ### TAINT should be more precise ###\n  declare.doc_file_id   'nonempty.text'     ### TAINT should be more precise ###\n  #.........................................................................................................\n  declare.doc_document_cfg\n    fields:\n      db:                 'dbay'\n      prefix:             'dbay_prefix'\n    default:\n      db:                 null\n      prefix:             'doc_'\n    create: ( x ) ->\n      return x unless ( not x? ) or ( @isa.object x )\n      R     = { @registry.doc_document_cfg.default..., x..., }\n      R.db             ?= new DBay()\n      R.file_adapters  ?= ( require './document' ).file_adapters\n      return R\n  #...........................................................................................................\n  declare.doc_add_file_cfg\n    fields:\n      doc_file_id:        'doc_file_id'\n      doc_fad_id:         'doc_fad_id'\n    default:\n      doc_file_id:        null\n      doc_fad_id:         null\n  # #...........................................................................................................\n  # declare.new_external_file_cfg\n  #   isa: 'anything'\n  #...........................................................................................................\n  declare.new_external_text_file_cfg\n    fields:\n      doc_file_id:        'doc_file_id'\n      doc_file_path:      'doc_file_path'\n      ### TAINT implement lists as enumerations ###\n      # doc_fad_id:         'doc_file_id' # ( x ) -> x is 'xtxt'\n    default:\n      doc_file_id:        null\n      doc_file_path:      null\n      # doc_fad_id:         'xtxt'\n  #...........................................................................................................\n  return document_types\n\nmodule.exports = { misfit, get_base_types, get_server_types, get_document_types, }\n\n\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# declare 'datamill_dsk', tests:\n#   \"@isa.nonempty_text x\":     ( x ) -> @isa.nonempty_text x\n\n# #-----------------------------------------------------------------------------------------------------------\n# declare 'datamill_sid', tests:\n#   \"@isa.positive_integer x\":  ( x ) -> @isa.positive_integer x\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# declare 'datamill_db_constructor_cfg', tests:\n#   \"@isa.object x\":                                  ( x ) -> @isa.object x\n#   \"( @isa.object x.db ) or ( @isa.function x.db \":  ( x ) -> ( @isa.object x.db ) or ( @isa.function x.db )\n#   \"@isa.nonempty_text x.prefix\":                    ( x ) -> @isa.nonempty_text x.prefix\n# #...........................................................................................................\n# @defaults.datamill_db_constructor_cfg =\n#   db:               null\n#   prefix:           'vogue'\n\n# #-----------------------------------------------------------------------------------------------------------\n# declare 'datamill_scrapers_constructor_cfg', tests:\n#   \"@isa.object x\":                                  ( x ) -> @isa.object x\n# #...........................................................................................................\n# @defaults.datamill_scrapers_constructor_cfg = {}\n\n# #-----------------------------------------------------------------------------------------------------------\n# declare 'datamill_scrapers_add_cfg', tests:\n#   \"@isa.object x\":                                  ( x ) -> @isa.object x\n#   \"@isa.object x.scraper\":                          ( x ) -> @isa.object x.scraper\n# #...........................................................................................................\n# @defaults.datamill_scrapers_add_cfg =\n#   scraper:          null\n\n# #-----------------------------------------------------------------------------------------------------------\n# declare 'datamill_scraper_constructor_cfg', tests:\n#   \"@isa.object x\":                                  ( x ) -> @isa.object x\n#   \"@isa.nonempty_text x.encoding\":                  ( x ) -> @isa.nonempty_text x.encoding\n#   \"@isa.datamill_dsk x.dsk\":                           ( x ) -> @isa.datamill_dsk x.dsk\n#   \"@isa_optional.nonempty_text x.url\":              ( x ) -> @isa_optional.nonempty_text x.url\n# #...........................................................................................................\n# @defaults.datamill_scraper_constructor_cfg =\n#   encoding:         'utf-8'\n#   dsk:              null\n#   url:              null\n\n# #-----------------------------------------------------------------------------------------------------------\n# declare 'datamill_scraper__XXX_get_details_chart_cfg', tests:\n#   \"@isa.object x\":                                  ( x ) -> @isa.object x\n#   \"@isa.datamill_dsk x.dsk\":                           ( x ) -> @isa.datamill_dsk x.dsk\n# #...........................................................................................................\n# @defaults.datamill_scraper__XXX_get_details_chart_cfg =\n#   dsk:              null\n\n# #-----------------------------------------------------------------------------------------------------------\n# declare 'datamill_scraper__XXX_get_details_table_cfg', tests:\n#   \"@isa.object x\":                                  ( x ) -> @isa.object x\n#   \"@isa.datamill_dsk x.dsk\":                           ( x ) -> @isa.datamill_dsk x.dsk\n# #...........................................................................................................\n# @defaults.datamill_scraper__XXX_get_details_table_cfg =\n#   dsk:              null\n\n# #-----------------------------------------------------------------------------------------------------------\n# declare 'datamill_hub_constructor_cfg', tests:\n#   \"@isa.object x\":                                  ( x ) -> @isa.object x\n#   \"@isa.datamill_db x.vdb\":                            ( x ) -> @isa.datamill_db x.vdb\n#   \"@isa.datamill_server x.server\":                     ( x ) -> @isa.datamill_server x.server\n#   \"@isa.datamill_scrapers x.scrapers\":                 ( x ) -> @isa.datamill_scrapers x.scrapers\n# #...........................................................................................................\n# @defaults.datamill_hub_constructor_cfg =\n#   vdb:                null\n#   server:             null\n#   scrapers:           null\n\n# #-----------------------------------------------------------------------------------------------------------\n# declare 'datamill_scheduler_constructor_cfg', tests:\n#   \"@isa.object x\":                                  ( x ) -> @isa.object x\n# #...........................................................................................................\n# @defaults.datamill_scheduler_constructor_cfg = {}\n\n# #-----------------------------------------------------------------------------------------------------------\n# declare 'datamill_scheduler_abs_duration', tests:\n#   \"@isa.nonempty_text x\":         ( x ) -> @isa.nonempty_text x\n#   \"x matches float, unit regex\":  ( x ) ->\n#     pattern     = ( require './vogue-scheduler' ).Vogue_scheduler.C.abs_duration_pattern\n#     units       = ( require './vogue-scheduler' ).Vogue_scheduler.C.duration_units\n#     return false unless ( match = x.match pattern )?\n#     return false unless match.groups.unit in units\n#     return true\n\n# #-----------------------------------------------------------------------------------------------------------\n# declare 'datamill_scheduler_rel_duration', tests:\n#   \"@isa.nonempty_text x\":         ( x ) -> @isa.nonempty_text x\n#   \"x matches precentage pattern\": ( x ) ->\n#     pattern     = ( require './vogue-scheduler' ).Vogue_scheduler.C.percentage_pattern\n#     return ( match = x.match pattern )?\n\n# #-----------------------------------------------------------------------------------------------------------\n# declare 'datamill_scheduler_absrel_duration', ( x ) ->\n#   return true if @isa.datamill_scheduler_abs_duration  x\n#   return true if @isa.datamill_scheduler_rel_duration  x\n#   return false\n\n# #-----------------------------------------------------------------------------------------------------------\n# declare 'datamill_scheduler_task', ( x ) ->\n#   return true if @isa.function      x\n#   return true if @isa.asyncfunction x\n#   return false\n\n# #-----------------------------------------------------------------------------------------------------------\n# declare 'datamill_scheduler_add_interval_cfg', tests:\n#   \"@isa.object x\":                                ( x ) -> @isa.object x\n#   \"@isa.datamill_scheduler_task x.task\":             ( x ) -> @isa.datamill_scheduler_task x.task\n#   \"@isa.datamill_scheduler_abs_duration x.repeat\":       ( x ) -> @isa.datamill_scheduler_abs_duration x.repeat\n#   \"@isa.datamill_scheduler_absrel_duration x.jitter\":    ( x ) -> @isa.datamill_scheduler_absrel_duration x.jitter\n#   # \"@isa.datamill_scheduler_absrel_duration x.timeout\":   ( x ) -> @isa.datamill_scheduler_abs_duration x.timeout\n#   \"@isa.datamill_scheduler_absrel_duration x.pause\":     ( x ) -> @isa.datamill_scheduler_absrel_duration x.pause\n# #...........................................................................................................\n# @defaults.datamill_scheduler_add_interval_cfg =\n#   task:             null\n#   repeat:           null\n#   jitter:           '0 seconds'\n#   pause:            '0 seconds'\n#   # timeout:          null\n\n# #-----------------------------------------------------------------------------------------------------------\n# declare 'datamill_html_or_buffer', tests:\n#   \"@type_of x in [ 'text', 'buffer', ]\":  ( x ) -> @type_of x in [ 'text', 'buffer', ]\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# declare 'datamill_db_trends_data_json_from_dsk_sid_cfg', tests:\n#   \"@isa.object x\":                                  ( x ) -> @isa.object x\n#   \"@isa.datamill_dsk x.dsk\":                           ( x ) -> @isa.datamill_dsk x.dsk\n#   \"@isa_optional.datamill_sid x.sid\":                  ( x ) -> @isa_optional.datamill_sid x.sid\n# #...........................................................................................................\n# @defaults.datamill_db_trends_data_json_from_dsk_sid_cfg =\n#   dsk:              null\n#   sid:              null\n"
  ]
}