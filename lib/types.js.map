{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug }                 = GUY.trm.get_loggers 'KASEKI/TYPES'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ Intertype }             = require 'intertype'\nbase_types                = null\nkaseki_types              = null\nmisfit                    = Symbol 'misfit'\nPATH                      = require 'node:path'\njoin                      = ( P... ) -> PATH.resolve PATH.join P...\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Intertype()\n  { declare }               = base_types\n  #.........................................................................................................\n  # declare.dbay                  override: true, isa: ( x ) -> x?.constructor?.name is 'DBay'\n  # declare.dbay_prefix                           isa: ( x ) -> ( @isa.text x ) and ( x.endsWith '_' )\n  #.........................................................................................................\n  return base_types\n\n#-----------------------------------------------------------------------------------------------------------\nget_kaseki_types = ->\n  return kaseki_types if kaseki_types?\n  #.........................................................................................................\n  kaseki_types                = new Intertype get_base_types()\n  { declare }                 = kaseki_types\n  #.........................................................................................................\n  declare.ksk_constructor_cfg\n    fields:\n      # project_name:       'nonempty.text'\n      repo_path:          'nonempty.text'\n      work_path:          'nonempty.text'\n    default:\n      # project_name:       null\n      repo_path:          null\n      work_path:          null\n    # create: ( x ) ->\n    #   return x if x? and not @isa.object x\n    #   R = { @registry.ksk_constructor_cfg.default..., x..., }\n    #     unless work_path\n    #   else\n    #     null\n    #   return R\n  #.........................................................................................................\n  declare.ic_constructor_cfg\n    fields:\n      work_path:          'nonempty.text'\n    default:\n      work_path:          null\n  #.........................................................................................................\n  declare.ksk_ignore_or_error ( x ) -> x in [ 'ignore', 'error', ]\n  #.........................................................................................................\n  declare.ksk_init_cfg\n    fields:\n      if_exists:          'ksk_ignore_or_error'\n    default:\n      if_exists:          'ignore'\n  #.........................................................................................................\n  declare.ksk_git_status_cfg\n    fields:\n      local_branch:   'optional.nonempty.text'\n      remote_branch:  'optional.nonempty.text'\n      ahead_count:    'optional.cardinal'\n      behind_count:   'optional.cardinal'\n      dirty_count:    'optional.cardinal'\n    default:\n      local_branch:   null\n      remote_branch:  null\n      ahead_count:    0\n      behind_count:   0\n      dirty_count:    0\n  #.........................................................................................................\n  declare.ksk_git_log_cfg\n    fields:\n      since:          'nonempty.text'\n    default:\n      since:          \"1 year ago\"\n  #.........................................................................................................\n  # declare.ksk_spawn_cfg\n    # fields:\n      # cwd:                      # <string> | <URL> Current working directory of the child process.\n      # input:                    # <string> | <Buffer> | <TypedArray> | <DataView> The value which will be passed as stdin to the spawned process. Supplying this value will override stdio[0].\n      # argv0:                    # <string> Explicitly set the value of argv[0] sent to the child process. This will be set to command if not specified.\n      # stdio:                    # <string> | <Array> Child's stdio configuration.\n      # env:                      # <Object> Environment key-value pairs. Default: process.env.\n      # uid:                      # <number> Sets the user identity of the process (see setuid(2)).\n      # gid:                      # <number> Sets the group identity of the process (see setgid(2)).\n      # timeout:                  # <number> In milliseconds the maximum amount of time the process is allowed to run. Default: undefined.\n      # killSignal:               # <string> | <integer> The signal value to be used when the spawned process will be killed. Default: 'SIGTERM'.\n      # maxBuffer:                # <number> Largest amount of data in bytes allowed on stdout or stderr. If exceeded, the child process is terminated and any output is truncated. See caveat at maxBuffer and Unicode. Default: 1024 * 1024.\n      # encoding:                 # <string> The encoding used for all stdio inputs and outputs. Default: 'buffer'.\n      # shell:                    # <boolean> | <string> If true, runs command inside of a shell. Uses '/bin/sh' on Unix, and process.env.ComSpec on Windows. A different shell can be specified as a string. See Shell requirements and Default Windows shell. Default: false (no shell).\n      # windowsVerbatimArguments: # <boolean> No quoting or escaping of arguments is done on Windows. Ignored on Unix. This is set to true automatically when shell is specified and is CMD. Default: false.\n      # windowsHide:              # <boolean> Hide the subprocess console window that would normally be created on Windows systems. Default: false.\n  #...........................................................................................................\n  return kaseki_types\n\nmodule.exports = { misfit, get_base_types, get_kaseki_types, }\n\n\n"
  ]
}