{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,UAAA,EAAA,KAAA,EAAA,IAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,OAAA,EAAA,YAAA,EAAA,GAAA,EAAA,MAAA,EAAA,GAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,CAAE,KAAF,CAAA,GAA4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,cAApB,CAA5B;;EACA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC;;EAIA,CAAA,CAAE,SAAF,CAAA,GAA4B,OAAA,CAAQ,WAAR,CAA5B;;EACA,UAAA,GAA4B;;EAC5B,YAAA,GAA4B;;EAC5B,MAAA,GAA4B,MAAA,CAAO,QAAP,EAb5B;;;EAiBA,cAAA,GAAiB,QAAA,CAAA,CAAA;AACjB,QAAA;IAAE,IAAqB,kBAArB;AAAA,aAAO,WAAP;KAAF;;IAEE,UAAA,GAA4B,IAAI,SAAJ,CAAA;IAC5B,CAAA,CAAE,OAAF,CAAA,GAA4B,UAA5B,EAHF;;;;;AAQE,WAAO;EATQ,EAjBjB;;;EA6BA,gBAAA,GAAmB,QAAA,CAAA,CAAA;AACnB,QAAA;IAAE,IAAuB,oBAAvB;AAAA,aAAO,aAAP;KAAF;;IAEE,YAAA,GAA8B,IAAI,SAAJ,CAAc,cAAA,CAAA,CAAd;IAC9B,CAAA,CAAE,OAAF,CAAA,GAA8B,YAA9B,EAHF;;IAKE,OAAO,CAAC,mBAAR,CACE;MAAA,MAAA,EACE;QAAA,SAAA,EAAoB,eAApB;QACA,aAAA,EAAoB;MADpB,CADF;MAGA,OAAA,EACE;QAAA,SAAA,EAAoB,IAApB;QACA,aAAA,EAAoB;MADpB;IAJF,CADF,EALF;;;;;;;;;;;;;;;;;;;;;AAiCE,WAAO;EAlCU;;EAoCnB,MAAM,CAAC,OAAP,GAAiB,CAAE,MAAF,EAAU,cAAV,EAA0B,gBAA1B;AAjEjB",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n{ debug }                 = GUY.trm.get_loggers 'KASEKI/TYPES'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ Intertype }             = require 'intertype'\nbase_types                = null\nkaseki_types              = null\nmisfit                    = Symbol 'misfit'\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Intertype()\n  { declare }               = base_types\n  #.........................................................................................................\n  # declare.dbay                  override: true, isa: ( x ) -> x?.constructor?.name is 'DBay'\n  # declare.dbay_prefix                           isa: ( x ) -> ( @isa.text x ) and ( x.endsWith '_' )\n  #.........................................................................................................\n  return base_types\n\n#-----------------------------------------------------------------------------------------------------------\nget_kaseki_types = ->\n  return kaseki_types if kaseki_types?\n  #.........................................................................................................\n  kaseki_types                = new Intertype get_base_types()\n  { declare }                 = kaseki_types\n  #.........................................................................................................\n  declare.ksk_constructor_cfg\n    fields:\n      repo_path:          'nonempty.text'\n      checkout_path:      'nonempty.text'\n    default:\n      repo_path:          null\n      checkout_path:      null\n\n  #     paths:\n  #       public:     PATH.resolve __dirname, '../public'\n  #       favicon:    PATH.resolve __dirname, '../public/favicon.png'\n  #       src:        PATH.resolve __dirname, '../src'\n  #     file_server:\n  #       # Enable or disable accepting ranged requests. Disabling this will not send Accept-Ranges and ignore the\n  #       # contents of the Range request header. defaults to true.\n  #       acceptRanges:     true\n  #       # Set Cache-Control response header, defaults to undefined, see docs: Cache-Control in MDN.\n  #       cacheControl:     undefined\n  #       # Enable or disable etag generation, defaults to true.\n  #       etag:             true\n  #       # Enable or disable Last-Modified header, defaults to true. Uses the file system's last modified value.\n  #       # defaults to true.\n  #       lastModified:     true\n  #       # Set ignore rules. defaults to undefined. ( path ) => boolean\n  #       ignore:           undefined\n  #       # If true, serves after await next(), allowing any downstream middleware to respond first. defaults to false.\n  #       defer:            false\n  #...........................................................................................................\n  return kaseki_types\n\nmodule.exports = { misfit, get_base_types, get_kaseki_types, }\n\n\n"
  ]
}